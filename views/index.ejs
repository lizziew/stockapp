<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css' />
    <script type="text/javascript" src="http://datahub.csail.mit.edu/static/lib/thrift/thrift.js"></script>
	<script type="text/javascript" src="http://datahub.csail.mit.edu/static/lib/datahub/datahub_types.js"></script>
	<script type="text/javascript" src="http://datahub.csail.mit.edu/static/lib/datahub/DataHub.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
	<script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
	<script src="https://code.highcharts.com/stock/highstock.js"></script>
	<script src="https://code.highcharts.com/modules/exporting.js"></script>
  </head>
  <body>
    <h1><%= title %></h1>
    <div id="container" style="height: 400px; min-width: 310px"></div>
  </body>
</html>
<script type="text/javascript">
	/*transport = new Thrift.Transport("http://datahub.csail.mit.edu/service/json"),
	protocol = new Thrift.Protocol(transport),
	client = new DataHubClient(protocol),
	con_params = new ConnectionParams({'user': 'eweitest', 'password': 'eweitest'}),
	con = client.open_connection(con_params),
	res = client.execute_sql(con, 'select * from eweitest.repo1.temperature'); 

	console.log(res); */
    var seriesOptions = [],
        seriesCounter = 0,
        names = ['MSFT', 'AAPL', 'GOOG'];

	$(function () {

	    Highcharts.setOptions({
	        global : {
	            useUTC : false
	        }
	    });
	    function createChart() {
		    // Create the chart
		    $('#container').highcharts('StockChart', {
		        chart : {
		            events : {
		               load : function () {
		     					setInterval(function () {
									$.ajax({
									  url: "/getData",
									  type: "POST", 
									  data:{"names": JSON.stringify(names)},
									  success: function(response) {
									    //console.log("success!!! got " + JSON.stringify(response));
									    for(var i in response) {
									    	var r = response[i]; 
									    	console.log(r["symbol"] + " ... " + r["lastTradePriceOnly"]);
									    	var x = (new Date()).getTime();
									    	var y = r["lastTradePriceOnly"]; 
									    	seriesOptions[i].addPoint([x,y], true, true);  
									    }
									  },
									  error: function(xhr) {
											console.log("Uh oh there was an error: " + error);
											console.log(xhr.status);
											console.log(xhr.responseText);
									  }
									});

		                  }, 5000);
		               }
		            }
		        },

		        rangeSelector: {
		            buttons: [{
		                count: 1,
		                type: 'minute',
		                text: '1M'
		            }, {
		                count: 5,
		                type: 'minute',
		                text: '5M'
		            }, {
		                type: 'all',
		                text: 'All'
		            }],
		            inputEnabled: false,
		            selected: 0
		        },

		        title : {
		            text : 'Last Bid --- Live'
		        },

		        exporting: {
		            enabled: false
		        },

		        series: seriesOptions
		    });
		}

		$.each(names, function (i, name) {
         seriesOptions[i] = {
         	name: name, 
         	data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime(),
                        i;

                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: 0
                        });
                    }
                    return data;
                }()) 
         };
         // As we're loading the data asynchronously, we don't know what order it will arrive. So
         // we keep a counter and create the chart when all the data is loaded.
         seriesCounter += 1;

         if (seriesCounter === names.length) {
             createChart();
         }
	   });
	});
</script> 

